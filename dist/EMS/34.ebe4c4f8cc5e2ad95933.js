(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{EJLG:function(e,n,t){"use strict";t.r(n);var r=t("mrSG"),a=t("CcnG"),s=t("qmRI"),i=function(){function e(e,n){var t=this;this.apis=e,this.ems=n,this.p=1,this.isedit=!1,this.errMsg=!1,this.index=1,this.examCenterData=[],this.isvisble=!1,this.popoverTitle="Delete Center",this.popoverMessage="Are you sure to delete",this.confirmClicked=!1,this.cancelClicked=!1,this.ems.active=2,this.ems.isAdmin=!0,this.ems.login("emsadmin@yopmail.com","Test@123").subscribe(function(e){"Success"==e.status&&(t.ems.isAdmin=!0,localStorage.setItem("sessionid",e.data.session_token),localStorage.setItem("uid",e.data.user_id),localStorage.setItem("role",e.data.role_name),localStorage.setItem("cen_id",e.data.cen_id),localStorage.setItem("username",e.data.user_name),localStorage.setItem("permission",e.data.action_list),t.sessionid=localStorage.getItem("sessionid"),t.uid=localStorage.getItem("uid"),t.apis.getExamCente(t.sessionid,t.uid).subscribe(function(e){"Successfully fetched"==e.message&&(t.examCenterData=e.data)}))})}return e.prototype.ngOnInit=function(){},e.prototype.onRowClick=function(){},e.prototype.EditCenter=function(e){var n=this;this.centerId=e,this.apis.singleExamCenter(e,this.sessionid,this.uid).subscribe(function(e){"Successfully fetched"==e.message&&(n.centerName=e.data.center_name,n.centerCode=e.data.center_code,n.centerCity=e.data.center_city,n.centerDistrict=e.data.center_district,n.centerPin=e.data.center_pin,n.centerMobile=e.data.center_mobile,n.centerPhone=e.data.center_phone_num,n.email=e.data.center_email,n.centerLocation=e.data.center_location,n.centerAddress=e.data.center_address,n.ansradio1=e.data.center_type,n.isedit=!0,n.errMsg=!1)}),this.errMsg=!1,$("html, body").animate({scrollTop:0})},e.prototype.DeleteCenter=function(e){var n=this;this.centerId=e,this.ems.deleteExamCenter(e,this.sessionid,this.uid).subscribe(function(e){"Unauthorised access"==e.message&&n.ems.sessionlogout(),n.ems.status=e.status,"Success"==e.status?(n.ems.msg=e.message,$("#myModal").modal("show"),n.ems.getExamCente(n.sessionid,n.uid).subscribe(function(e){"Unauthorised access"==e.message&&n.ems.sessionlogout(),"Success"==e.status&&(n.examCenterData=e.data)}),document.getElementById("Login").reset()):(0==e.data.length&&(n.nullMessage=!0),"Bad request"==e.message?(n.ems.msg="Internal Server Error",$("#myModal").modal("show")):(n.ems.msg=e.message,$("#myModal").modal("show")))}),$("html, body").animate({scrollTop:0})},e.prototype.AddCenter=function(e){var n=this;e.invalid?this.errMsg=!0:(this.errMsg=!1,0==this.isedit?this.ems.addExamCenter(this.centerName,this.centerCode,this.centerAddress,this.centerCity,this.centerLocation,this.centerDistrict,this.centerPin,this.centerPhone,this.email,this.centerMobile,this.ansradio1,this.sessionid,this.uid).subscribe(function(t){"Unauthorised access"==t.message&&n.ems.sessionlogout(),n.ems.status=t.status,"Success"==t.status?(n.ems.msg=t.message,$("#myModal").modal("show"),n.apis.getExamCente(n.sessionid,n.uid).subscribe(function(e){"Unauthorised access"==t.message&&n.ems.sessionlogout(),"Successfully fetched"==e.message&&(n.examCenterData=e.data)}),e.reset()):(0==t.data.length&&(n.nullMessage=!0),"Bad request"==t.message?(n.ems.msg="Internal Server Error",$("#myModal").modal("show")):(n.ems.msg=t.message,$("#myModal").modal("show")))}):(this.ems.updateExamCenter(this.centerId,this.centerName,this.centerCode,this.centerAddress,this.centerCity,this.centerLocation,this.centerDistrict,this.centerPin,this.centerPhone,this.email,this.centerMobile,this.ansradio1,this.sessionid,this.uid).subscribe(function(t){"Unauthorised access"==t.message&&n.ems.sessionlogout(),$("html, body").animate({scrollTop:0}),n.ems.status=t.status,"Success"==t.status?(n.centerName="",n.centerCode="",n.centerCity="",n.centerDistrict="",n.centerPin="",n.centerMobile="",n.centerPhone="",n.email="",n.centerLocation="",n.centerAddress="",n.ansradio1="",n.ems.msg=t.message,$("#myModal").modal("show"),n.apis.getExamCente(n.sessionid,n.uid).subscribe(function(e){"Unauthorised access"==t.message&&n.ems.sessionlogout(),"Successfully fetched"==e.message&&(n.examCenterData=e.data)}),e.reset()):(0==t.data.length&&(n.nullMessage=!0),"Bad request"==t.message?(n.ems.msg="Internal Server Error",$("#myModal").modal("show")):(n.ems.msg=t.message,$("#myModal").modal("show")))}),this.isedit=!1))},e.prototype.ClearCenter=function(e){$("html, body").animate({scrollTop:0}),this.isedit=!1,this.errMsg=!1,e.reset()},e=r.b([Object(a.Component)({selector:"app-exam-center",template:t("OT2W"),styles:[t("kZEi")]}),r.d("design:paramtypes",[s.a,s.a])],e)}(),o=t("xkgV"),l=function(){function e(){}return e.prototype.transform=function(e,n){return void 0===n?e:e.filter(function(e){return e.center_name.toLowerCase().includes(n.toLowerCase())})},e=r.b([Object(a.Pipe)({name:"customFilter"})],e)}(),c=t("Zseb"),d=t("Ip0R"),p=t("ZYCi"),u=t("gIcY"),m=t("fCu2");t.d(n,"routes",function(){return g}),t.d(n,"ExamCenterModule",function(){return h});var g=[{path:"",component:i,pathMatch:"full"}],h=function(){function e(){}return e.routes=g,e=r.b([Object(a.NgModule)({imports:[d.CommonModule,p.RouterModule.forChild(g),u.FormsModule,c.a,m.a.forRoot({confirmButtonType:"danger"}),o.a],declarations:[i,l],providers:[],bootstrap:[i]})],e)}()},OT2W:function(e,n){e.exports='\x3c!-- <div class="row brdcrm-mrgn">\r\n        <div class="col-md-6 col-sm-6 col-xs-8">\r\n          <div >\r\n          <div class="panel-heading mainpanel-hd text-uppercase">\r\n\r\n          </div>\r\n          </div>\r\n         </div>\r\n         <div class="col-md-6 col-sm-12 col-xs-12 pull-right">\r\n          <ol class="breadcrumb">\r\n            <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>\r\n            <li ><a href="#/app/preExam"> Pre Examination Management</a></li>\r\n            <li class="active">Exam Center</li>\r\n            </ol>\r\n         </div>\r\n</div> --\x3e\r\n<div *ngIf="ems.isAdmin==true">\r\n    <section>\r\n        <div class="row margin-card">\r\n          <form #f="ngForm" (ngSubmit)="AddCenter(f)"  id="Login">\r\n            <div class="col-md-12" id="first-content">\r\n                <div class="panel panel-primary" id="shadows">\r\n                    \x3c!-- <div class="panel-heading " id="head-title">Enter center details\r\n                    </div> --\x3e\r\n                    <div class="panel-heading " id="head-title"><i class="fa fa-info-circle"></i>&nbsp;Enter center details\r\n                    </div>\r\n                    <div class="panel-body">\r\n                        <div class="row">\r\n                          <div *ngIf="isedit==false">\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="email" id="labels"> Name<strong style="color:red;">*</strong>  </label>\r\n                                    <input type="text" maxlength="50" [(ngModel)]="centerName" required pattern="[a-zA-Z][a-zA-Z.\'&, ]*" class="form-control input-sm"  #nameControl="ngModel" placeholder="Center Name" name="centerName">\r\n                                    <span style="color:red;" class="help-block" *ngIf="nameControl.errors?.required && nameControl.touched">\r\n                                        Name is required\r\n                                    </span>\r\n                                    <label style="color:red;" class="input-sm" *ngIf="nameControl.errors?.pattern && nameControl.touched && !(nameControl.errors?.required)">\r\n                                        Only Alphabets and \'.& are allowed,first letter must be a letter\r\n                                    </label>\r\n                                </div>\r\n                          </div>\r\n                          </div>\r\n                          <div *ngIf="isedit">\r\n                                  <div class="col-md-6">\r\n                                      <div class="form-group">\r\n                                          <label for="email" id="labels"> Name<strong style="color:red;">*</strong>  </label>\r\n                                          <input type="text" [(ngModel)]="centerName" disabled pattern="[a-zA-Z][a-zA-Z ]*" class="form-control input-sm"  #nameControl="ngModel" placeholder="Center Name" name="centerName">\r\n\r\n                                      </div>\r\n                                </div>\r\n                          </div>\r\n\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="pwd" id="labels">Code<strong style="color:red;">*</strong></label>\r\n                                    <input type="text" maxlength="5" minlength="5" [(ngModel)]="centerCode" pattern="^[a-zA-Z0-9]*$" class="form-control input-sm" placeholder="Center Code" name="centerCode" #codecontrol="ngModel" required>\r\n                                    <span style="color:red;" class="help-block" *ngIf="codecontrol.invalid && codecontrol.touched">\r\n                                        Must enter the center code  of length 5\r\n                                    </span>\r\n                                    <span style="color:red;" class="help-block" *ngIf="codecontrol.errors?.pattern && codecontrol.touched && !(codecontrol.errors?.required)">\r\n                                          Center code  must be combination of digit and letters\r\n                                  </span>\r\n                                    \x3c!-- <label style="color:red;" class="input-sm" *ngIf="citycontrol.errors?.pattern && citycontrol.touched && !(citycontrol.errors?.required)">\r\n                                        Only Aphabets allowed\r\n                                    </label> --\x3e\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="email" id="labels"> City<strong style="color:red;">*</strong></label>\r\n                                    <input type="text"  maxlength="20" [(ngModel)]="centerCity" pattern="[a-zA-Z][a-zA-Z]*" class="form-control input-sm" placeholder="Center City" name="centerCity" #citycontrol="ngModel" required  >\r\n                                    <span style="color:red;" class="help-block" *ngIf="citycontrol.invalid && citycontrol.touched">\r\n                                        Must enter the city name\r\n                                    </span>\r\n                                    <label style="color:red;" class="input-sm" *ngIf="citycontrol.errors?.pattern && citycontrol.touched && !(citycontrol.errors?.required)">\r\n                                        Only Alphabets  allowed\r\n                                    </label>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                  <div class="form-group">\r\n                                      <label for="email" id="labels">District<strong style="color:red;">*</strong></label>\r\n\r\n                                      <select  type="text" [(ngModel)]="centerDistrict" #districtControl="ngModel" required name="centerDistrict" class="form-control input-sm">\r\n                                          <option hidden value="undefined"\r\n                                          disabled selected>----select  District----</option>\r\n\r\n                                          \x3c!-- <option  value="Kottayam" >Kottayam</option>\r\n                                          <option  value="Pathanamthitta" >Pathanamthitta</option>\r\n                                          <option  value="Idukki" >Idukki</option>\r\n                                          <option  value="Alappuzha" >Alappuzha</option>\r\n                                          <option  value="Ernakulam" >Ernakulam</option> --\x3e\r\n                                          \x3c!-- <option  value="Kannur">Kannur</option>\r\n                                          <option  value="Wayanad">Wayanad</option>\r\n                                          <option  value="Kasaragod" >Kasaragod</option> --\x3e\r\n                                          <option  value="Thiruvananthapuram" >Thiruvananthapuram</option>\r\n                                          <option  value="Pathanamthitta" >Pathanamthitta</option>\r\n                                          <option  value="Kollam" >Kollam</option>\r\n                                          <option  value="Alappuzha" >Alappuzha</option>\r\n\r\n                                       </select>\r\n\r\n                                       <span style="color:red;" class="help-block" *ngIf="districtControl.invalid && districtControl.touched">\r\n                                           Must choose a valid district\r\n                                       </span>\r\n\r\n                                  </div>\r\n                              </div>\r\n\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="email" id="labels"> Pin<strong style="color:red;">*</strong></label>\r\n                                    <input type="number" [(ngModel)]="centerPin"   pattern="^[0-9]{6,6}$" #pinControl="ngModel" class="form-control input-sm" placeholder="Center Pin" name="centerPin" required >\r\n                                    <span style="color:red;" class="help-block" *ngIf="pinControl.invalid && pinControl.touched">\r\n                                        Must enter a  pincode\r\n                                    </span>\r\n                                    <label style="color:red;" class="input-sm" *ngIf="pinControl.errors?.pattern && pinControl.touched && !(pinControl.errors?.required)">\r\n                                          Only six digits  allowed\r\n                                   </label>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="pwd" id="labels"> Mobile<strong style="color:red;">*</strong></label>\r\n                                    <input type="text" maxlength="10" [(ngModel)]="centerMobile"class="form-control input-sm" pattern="^(?:(?:\\+|0{0,2})91(\\s*[\\-]\\s*)?|[0]?)?[6789]\\d{9,12}$" placeholder="Center Mobile" name="centerMobile" #mobileControl="ngModel" required>\r\n                                    <span style="color:red;" class="help-block" *ngIf="mobileControl.invalid && mobileControl.touched">\r\n                                        Must be a valid Number\r\n                                    </span>\r\n                                    <label style="color:red;" class="input-sm" *ngIf="mobileControl.errors?.pattern && mobileControl.touched && !(mobileControl.errors?.required)">\r\n                                        Only Numbers allowed,10-13 digits\r\n                                    </label>\r\n                                </div>\r\n                                \x3c!-- <div *ngIf="centerMobileflag" class="red-text center error-message"\r\n                               style="text-align: center;font-size: 15px;color:red;">\r\n                               valid mobile number is required*\r\n                               </div> --\x3e\r\n                            </div>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="email" id="labels"> Land phone<strong style="color:red;">*</strong></label>\r\n                                    <input type="text" [(ngModel)]="centerPhone" minlength="11" maxlength="11" class="form-control input-sm" pattern="^[0-9]*$" #phoneControl="ngModel" placeholder="Center Phone" name="centerPhone" required>\r\n                                    <span style="color:red;" class="help-block" *ngIf="phoneControl.invalid && phoneControl.touched">\r\n                                        Must be a valid Number\r\n                                    </span>\r\n                                    <label style="color:red;" class="input-sm" *ngIf="phoneControl.errors?.pattern && phoneControl.touched &&!(phoneControl.errors?.required)">\r\n                                        Only Numbers allowed ,11 digits\r\n                                    </label>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                              <div *ngIf="isedit==false">\r\n\r\n                                <div class="form-group">\r\n                                    \x3c!-- <label for="pwd" id="labels">Center Email:<strong style="color:red;">*</strong></label>\r\n                                    <input type="email" [email]="True" [(ngModel)]="centerEmail" class="form-control input-sm" placeholder="Center Email" name="centerEmail" #emailControl="ngModel" required>\r\n                                    <span style="color:red;" class="help-block" *ngIf="emailControl.invalid && emailControl.touched">\r\n                                        Must be a valid email\r\n                                    </span> --\x3e\r\n\r\n                                    <label for="email" id="labels">Email<strong style="color:red;">*</strong></label>\r\n                                    <input type="email" id="email" class="form-control input-sm" placeholder="Enter Email" name="email" pattern="[a-zA-Z0-9][a-zA-Z0-9]*[@][a-zA-Z]*[.][a-zA-Z][a-zA-Z][a-zA-Z]*" required [(ngModel)]="email"  #emailControl="ngModel" [email]=true>\r\n                                    <div style="color:red;" class="help-block" *ngIf="emailControl.invalid && (emailControl.dirty|| emailControl.touched)">\r\n                                        <div *ngIf="emailControl.errors?.required" >\r\n                                        Email is required\r\n                                        </div>\r\n                                        <div *ngIf="emailControl.errors?.pattern && emailControl.touched &&!(emailControl.errors?.required)">Email must be valid\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                \x3c!-- <div *ngIf="centerEmailflag" class="red-text center error-message"\r\n                                style="text-align: center;font-size: 15px;color:red;">\r\n                                valid email is required*\r\n                                </div> --\x3e\r\n                              </div>\r\n                              <div *ngIf="isedit">\r\n                                      <label for="pwd" id="labels"> Email<strong style="color:red;">*</strong></label>\r\n                                      <input type="email" [(ngModel)]="email" class="form-control input-sm" placeholder="Center Email" name="centerEmail" #emailControl="ngModel" disabled>\r\n                              </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                  <div class="form-group">\r\n                                      <label for="pwd" id="labels"> Address<strong style="color:red;">*</strong></label>\r\n                                      <textarea name="centerAddress" maxlength="50" [(ngModel)]="centerAddress" class="form-control input-sm" form="usrform" placeholder="Enter address" #addressControl="ngModel" required></textarea>\r\n                                      <span style="color:red;" class="help-block" *ngIf="addressControl.invalid && addressControl.touched">\r\n                                           Must enter center address\r\n                                       </span>\r\n                                 </div>\r\n                                  \x3c!--  <div *ngIf="centerAddressflag" class="red-text center error-message"\r\n                                  style="text-align: center;font-size: 15px;color:red;">\r\n                                  please enter the  address  *\r\n                                  </div> --\x3e\r\n                              </div>\r\n                            <div class="col-md-6">\r\n                                  <div class="form-group">\r\n                                      <label for="pwd" id="labels"> Location<strong style="color:red;">*</strong></label>\r\n                                      <input type="text" maxlength="30"  [(ngModel)]="centerLocation" pattern="[a-zA-Z0-9]*[a-zA-Z][a-zA-Z0-9 ]*" class="form-control input-sm" placeholder="Center Location" name="centerLocation"   #locationControl="ngModel" required>\r\n                                      <span style="color:red;" class="help-block" *ngIf="locationControl.invalid && locationControl.touched">\r\n                                           Must enter center location\r\n                                       </span>\r\n                                       <label style="color:red;" class="input-sm" *ngIf="locationControl.errors?.pattern && locationControl.touched &&!(locationControl.errors?.required)">\r\n                                            special character not allowed,at least one letter required\r\n                                        </label>\r\n                                  </div>\r\n\r\n                              </div>\r\n                        </div>\r\n\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <div class="form-group">\r\n                                    <label for="radios" id="labels"> Type<strong style="color:red;">*</strong></label>\r\n                                    <br>\r\n                                    <label class="radio-inline">\r\n                                    <input type="radio" id="radio"  name="ansradio1" [(ngModel)]="ansradio1" value=1 required>Goverment</label>\r\n                                    <label class="radio-inline">\r\n                                    <input type="radio" name="ansradio1" [(ngModel)]="ansradio1" value=2 required>Aided</label>\r\n                                    <label class="radio-inline">\r\n                                    <input type="radio" name="ansradio1" [(ngModel)]="ansradio1" value=3 required>Unaided</label>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div  *ngIf="errMsg" class="red-text center error-message" style="text-align: center;font-size: 15px;color:red;">\r\n                         Please fill valid data in the required fields\r\n                         </div>\r\n                    <div *ngIf="isedit==false" class="panel-footer panel-default text-right">\r\n                        <button type="reset" (click)="ClearCenter(f)" class="btn btn-danger btn-sm"><i class="fa fa-eraser"></i>&nbsp;Clear</button>&nbsp;\r\n                        <button type="submit" class="btn btn-primary btn-sm"><i class="fa fa-plus"></i>&nbsp;Add</button>\r\n                    </div>\r\n                    <div *ngIf="isedit==true"class="panel-footer panel-default text-right">\r\n                      <button type="reset"   (click)="ClearCenter(f)" class="btn btn-danger btn-sm"><i class="fa fa-eraser"></i>&nbsp;Clear</button>&nbsp;\r\n                      <button type="submit" class="btn btn-primary btn-sm"><i class="fa fa-wrench" aria-hidden="true"></i>&nbsp;Update</button>\r\n                    </div>\r\n\r\n                    \x3c!--  <div class="panel-footer">refg\r\n                    </div> --\x3e\r\n                </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n\r\n</section>\r\n\x3c!-- panels section --\x3e\r\n<section>\r\n    <br>\r\n    <br>\r\n\r\n        <div class="panel panel-primary" id="shadows">\r\n \r\n            \x3c!-- <div class="panel-heading " id="head-title"><i class="fa fa-info-circle"></i>&nbsp;Exam Center details\r\n            </div> --\x3e\r\n            <div class="panel-heading " id="head-title">\r\n                <div class="row">\r\n                 <div class="col-md-4">\r\n                    <i class="fa fa-info-circle userdetails"></i>&nbsp;Exam Center details\r\n                 </div>\r\n                 <div class="col-md-8">\r\n                    \x3c!-- <form class="navbar-form navbar-left pull-right radius">\r\n                          <div class="form-group">\r\n                            <input type="text" class="form-control radius" placeholder="Search">\r\n                          </div>\r\n                          <button type="submit" class="btn btn-default radius"><i class="fa fa-search"></i></button>\r\n                        </form> --\x3e\r\n  \r\n                        <input type="text" class="black pull-right radius" [(ngModel)]="center_name" style="font-family: FontAwesome;" \r\n                        type="text" placeholder="&#xF002; Serach by name"/>\r\n                  </div>\r\n                 </div>\r\n             </div>\r\n            <div class="panel-body">\r\n                <div class="row">\r\n                    \x3c!--  <div class="col-md-12">\r\n                    <h1 class="text-center">\r\n                        No more tables.\r\n                    </h1>\r\n                    <h3 class="text-center">\r\n                        Resize the browser screen to see how the table changes\r\n                    </h3>\r\n                    </div> --\x3e\r\n                    <div id="no-more-tables">\r\n                        <table class="col-md-12 col-sm-12 col-xs-12 table-bordered table-striped table-condensed cf">\r\n                            <thead class="cf">\r\n                                  <tr>\r\n                                        <th>No</th>\r\n                                        <th>Name of center</th>\r\n                                        <th>Center code</th>\r\n                                        <th>Address</th>\r\n                                        <th>Mobile</th>\r\n                                        <th>Edit</th>\r\n                                        <th>Delete</th>\r\n                                  </tr>\r\n                            </thead>\r\n                            <tbody>\r\n\r\n                                <tr *ngFor="let i of examCenterData |  customFilter:center_name | paginate: { itemsPerPage: 10, currentPage: p };let j=index;">\r\n                                     <td data-title="No">{{(10*(p-1))+j+1}}</td>\r\n                                     <td data-title="Name of center">{{i.center_name}}</td>\r\n                                     <td data-title="Center code">{{i.center_code}}</td>\r\n                                     <td data-title="Address">{{i.center_address}}</td>\r\n                                     <td data-title="Mobile">{{i.center_mobile}}</td>\r\n\r\n                                     <td data-title="Edit"><a (click)="EditCenter(i.center_id)" style="cursor:pointer"><i class="fa fa-pencil"></i></a>\r\n                                      <td data-title="Delete" class="editdel"><a class="btn btn-default"\r\n                                      mwlConfirmationPopover\r\n                                      [popoverTitle]="popoverTitle"\r\n                                      [popoverMessage]="popoverMessage"\r\n                                      placement="left"\r\n                                      (confirm)="DeleteCenter(i.center_id)"\r\n                                      (cancel)="cancelClicked = true"   role="button" title="Delete"><i class="fa fa-trash"></i></a></td>\r\n\r\n                                  </tr>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                        <pagination-controls style="text-align:center;" (pageChange)="p = $event" >\r\n                            </pagination-controls>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n</section>\r\n</div>\r\n\r\n\r\n<div *ngIf="!ems.isAdmin" >\r\n    <section>\r\n        <br>\r\n        <br>\r\n\r\n            <div class="panel panel-primary margin-card" id="shadows">\r\n                \x3c!-- <div class="panel-heading">\r\n                    Exam center Details\r\n                </div> --\x3e\r\n                \x3c!-- <div class="panel-heading " id="head-title"><i class="fa fa-info-circle"></i>&nbsp;Exam Center details\r\n                </div>\r\n                 --\x3e\r\n                <div class="panel-heading " id="head-title">\r\n                    <div class="row">\r\n                     <div class="col-md-4">\r\n                        <i class="fa fa-info-circle userdetails"></i>&nbsp;Exam Center details\r\n                     </div>\r\n                     <div class="col-md-8">\r\n                        \x3c!-- <form class="navbar-form navbar-left pull-right radius">\r\n                              <div class="form-group">\r\n                                <input type="text" class="form-control radius" placeholder="Search">\r\n                              </div>\r\n                              <button type="submit" class="btn btn-default radius"><i class="fa fa-search"></i></button>\r\n                            </form> --\x3e\r\n      \r\n                            <input type="text" class="black pull-right radius" [(ngModel)]="user_name" style="font-family: FontAwesome;" \r\n                            type="text" placeholder="&#xF002; Serach by name"/>\r\n                      </div>\r\n                     </div>\r\n                 </div>\r\n                <div class="panel-body">\r\n                    <div class="row">\r\n                        \x3c!--  <div class="col-md-12">\r\n                        <h1 class="text-center">\r\n                            No more tables.\r\n                        </h1>\r\n                        <h3 class="text-center">\r\n                            Resize the browser screen to see how the table changes\r\n                        </h3>\r\n                        </div> --\x3e\r\n                        <div id="no-more-tables">\r\n                            <table class="col-md-12 col-sm-12 col-xs-12 table-bordered table-striped table-condensed cf">\r\n                                <thead class="cf">\r\n                                      <tr>\r\n                                            <th>No</th>\r\n                                            <th>Name of center</th>\r\n                                            <th>Center code</th>\r\n                                            <th>Address</th>\r\n                                            <th>Mobile</th>\r\n\r\n                                      </tr>\r\n                                </thead>\r\n                                <tbody>\r\n\r\n                                    <tr *ngFor="let i of examCenterData |  customFilter:user_name | paginate: { itemsPerPage: 20, currentPage: p };let j=index">\r\n                                         <td data-title="No">{{(20*(p-1))+j+1}}</td>\r\n                                         <td data-title="Name of center">{{i.center_name}}</td>\r\n                                         <td data-title="Center code">{{i.center_code}}</td>\r\n                                         <td data-title="Address">{{i.center_address}}</td>\r\n                                         <td data-title="Mobile">{{i.center_mobile}}</td>\r\n\r\n\r\n\r\n                                      </tr>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </tbody>\r\n                            </table>\r\n                            <pagination-controls style="text-align:center;" (pageChange)="p = $event" >\r\n                                </pagination-controls>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    </section>\r\n</div>\r\n'},kZEi:function(e,n){e.exports=""},xkgV:function(e,n,t){"use strict";t.d(n,"a",function(){return p});var r=t("CcnG"),a=t("Ip0R"),s=function(){function e(){this.change=new r.EventEmitter,this.instances={},this.DEFAULT_ID="DEFAULT_PAGINATION_ID"}return e.prototype.defaultId=function(){return this.DEFAULT_ID},e.prototype.register=function(e){(null==e.id&&(e.id=this.DEFAULT_ID),this.instances[e.id])?this.updateInstance(e)&&this.change.emit(e.id):(this.instances[e.id]=e,this.change.emit(e.id))},e.prototype.updateInstance=function(e){var n=!1;for(var t in this.instances[e.id])e[t]!==this.instances[e.id][t]&&(this.instances[e.id][t]=e[t],n=!0);return n},e.prototype.getCurrentPage=function(e){if(this.instances[e])return this.instances[e].currentPage},e.prototype.setCurrentPage=function(e,n){if(this.instances[e]){var t=this.instances[e];n<=Math.ceil(t.totalItems/t.itemsPerPage)&&1<=n&&(this.instances[e].currentPage=n,this.change.emit(e))}},e.prototype.setTotalItems=function(e,n){this.instances[e]&&0<=n&&(this.instances[e].totalItems=n,this.change.emit(e))},e.prototype.setItemsPerPage=function(e,n){this.instances[e]&&(this.instances[e].itemsPerPage=n,this.change.emit(e))},e.prototype.getInstance=function(e){return void 0===e&&(e=this.DEFAULT_ID),this.instances[e]?this.clone(this.instances[e]):{}},e.prototype.clone=function(e){var n={};for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n},e}(),i=Number.MAX_SAFE_INTEGER,o=function(){function e(e){this.service=e,this.state={}}return e.prototype.transform=function(e,n){if(n instanceof Array&&(n=n[0]),!(e instanceof Array)){var t=n.id||this.service.defaultId;return this.state[t]?this.state[t].slice:e}var r,a,s=n.totalItems&&n.totalItems!==e.length,o=this.createInstance(e,n),l=o.id,c=o.itemsPerPage;if(this.service.register(o),!s&&e instanceof Array){if(c=+c||i,a=(r=(o.currentPage-1)*c)+c,this.stateIsIdentical(l,e,r,a))return this.state[l].slice;var d=e.slice(r,a);return this.saveState(l,e,d,r,a),this.service.change.emit(l),d}return this.saveState(l,e,e,r,a),e},e.prototype.createInstance=function(e,n){var t=n;return this.checkConfig(t),{id:null!=t.id?t.id:this.service.defaultId(),itemsPerPage:+t.itemsPerPage||0,currentPage:+t.currentPage||1,totalItems:+t.totalItems||e.length}},e.prototype.checkConfig=function(e){var n=["itemsPerPage","currentPage"].filter(function(n){return!(n in e)});if(0<n.length)throw new Error("PaginatePipe: Argument is missing the following required properties: "+n.join(", "))},e.prototype.saveState=function(e,n,t,r,a){this.state[e]={collection:n,size:n.length,slice:t,start:r,end:a}},e.prototype.stateIsIdentical=function(e,n,t,r){var a=this.state[e];return!!a&&(!(a.size!==n.length||a.start!==t||a.end!==r)&&a.slice.every(function(e,r){return e===n[t+r]}))},e.decorators=[{type:r.Pipe,args:[{name:"paginate",pure:!1}]}],e.ctorParameters=function(){return[{type:s}]},e}();function l(e){return!!e&&"false"!==e}var c=function(){function e(){this.maxSize=7,this.previousLabel="Previous",this.nextLabel="Next",this.screenReaderPaginationLabel="Pagination",this.screenReaderPageLabel="page",this.screenReaderCurrentLabel="You're on page",this.pageChange=new r.EventEmitter,this._directionLinks=!0,this._autoHide=!1,this._responsive=!1}return Object.defineProperty(e.prototype,"directionLinks",{get:function(){return this._directionLinks},set:function(e){this._directionLinks=l(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"autoHide",{get:function(){return this._autoHide},set:function(e){this._autoHide=l(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"responsive",{get:function(){return this._responsive},set:function(e){this._responsive=l(e)},enumerable:!0,configurable:!0}),e.decorators=[{type:r.Component,args:[{selector:"pagination-controls",template:'\n    <pagination-template  #p="paginationApi"\n                         [id]="id"\n                         [maxSize]="maxSize"\n                         (pageChange)="pageChange.emit($event)">\n    <ul class="ngx-pagination" \n        role="navigation" \n        [attr.aria-label]="screenReaderPaginationLabel" \n        [class.responsive]="responsive"\n        *ngIf="!(autoHide && p.pages.length <= 1)">\n\n        <li class="pagination-previous" [class.disabled]="p.isFirstPage()" *ngIf="directionLinks"> \n            <a tabindex="0" *ngIf="1 < p.getCurrent()" (keyup.enter)="p.previous()" (click)="p.previous()" [attr.aria-label]="previousLabel + \' \' + screenReaderPageLabel">\n                {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf="p.isFirstPage()">\n                {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class="small-screen">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]="p.getCurrent() === page.value" \n            [class.ellipsis]="page.label === \'...\'"\n            *ngFor="let page of p.pages">\n            <a tabindex="0" (keyup.enter)="p.setCurrent(page.value)" (click)="p.setCurrent(page.value)" *ngIf="p.getCurrent() !== page.value">\n                <span class="show-for-sr">{{ screenReaderPageLabel }} </span>\n                <span>{{ page.label }}</span>\n            </a>\n            <ng-container *ngIf="p.getCurrent() === page.value">\n                <span class="show-for-sr">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ page.label }}</span> \n            </ng-container>\n        </li>\n\n        <li class="pagination-next" [class.disabled]="p.isLastPage()" *ngIf="directionLinks">\n            <a tabindex="0" *ngIf="!p.isLastPage()" (keyup.enter)="p.next()" (click)="p.next()" [attr.aria-label]="nextLabel + \' \' + screenReaderPageLabel">\n                 {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf="p.isLastPage()">\n                 {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </pagination-template>\n    ',styles:["\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '\xab';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '\xbb';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  "],changeDetection:r.ChangeDetectionStrategy.OnPush,encapsulation:r.ViewEncapsulation.None}]}],e.ctorParameters=function(){return[]},e.propDecorators={id:[{type:r.Input}],maxSize:[{type:r.Input}],directionLinks:[{type:r.Input}],autoHide:[{type:r.Input}],responsive:[{type:r.Input}],previousLabel:[{type:r.Input}],nextLabel:[{type:r.Input}],screenReaderPaginationLabel:[{type:r.Input}],screenReaderPageLabel:[{type:r.Input}],screenReaderCurrentLabel:[{type:r.Input}],pageChange:[{type:r.Output}]},e}(),d=function(){function e(e,n){var t=this;this.service=e,this.changeDetectorRef=n,this.maxSize=7,this.pageChange=new r.EventEmitter,this.pages=[],this.changeSub=this.service.change.subscribe(function(e){t.id===e&&(t.updatePageLinks(),t.changeDetectorRef.markForCheck(),t.changeDetectorRef.detectChanges())})}return e.prototype.ngOnInit=function(){void 0===this.id&&(this.id=this.service.defaultId()),this.updatePageLinks()},e.prototype.ngOnChanges=function(e){this.updatePageLinks()},e.prototype.ngOnDestroy=function(){this.changeSub.unsubscribe()},e.prototype.previous=function(){this.checkValidId(),this.setCurrent(this.getCurrent()-1)},e.prototype.next=function(){this.checkValidId(),this.setCurrent(this.getCurrent()+1)},e.prototype.isFirstPage=function(){return 1===this.getCurrent()},e.prototype.isLastPage=function(){return this.getLastPage()===this.getCurrent()},e.prototype.setCurrent=function(e){this.pageChange.emit(e)},e.prototype.getCurrent=function(){return this.service.getCurrentPage(this.id)},e.prototype.getLastPage=function(){var e=this.service.getInstance(this.id);return e.totalItems<1?1:Math.ceil(e.totalItems/e.itemsPerPage)},e.prototype.getTotalItems=function(){return this.service.getInstance(this.id).totalItems},e.prototype.checkValidId=function(){null==this.service.getInstance(this.id).id&&console.warn('PaginationControlsDirective: the specified id "'+this.id+'" does not match any registered PaginationInstance')},e.prototype.updatePageLinks=function(){var e=this,n=this.service.getInstance(this.id),t=this.outOfBoundCorrection(n);t!==n.currentPage?setTimeout(function(){e.setCurrent(t),e.pages=e.createPageArray(n.currentPage,n.itemsPerPage,n.totalItems,e.maxSize)}):this.pages=this.createPageArray(n.currentPage,n.itemsPerPage,n.totalItems,this.maxSize)},e.prototype.outOfBoundCorrection=function(e){var n=Math.ceil(e.totalItems/e.itemsPerPage);return n<e.currentPage&&0<n?n:e.currentPage<1?1:e.currentPage},e.prototype.createPageArray=function(e,n,t,r){r=+r;for(var a=[],s=Math.ceil(t/n),i=Math.ceil(r/2),o=e<=i,l=s-i<e,c=!o&&!l,d=r<s,p=1;p<=s&&p<=r;){var u=void 0,m=this.calculatePageNumber(p,e,r,s);u=d&&(2===p&&(c||l)||p===r-1&&(c||o))?"...":m,a.push({label:u,value:m}),p++}return a},e.prototype.calculatePageNumber=function(e,n,t,r){var a=Math.ceil(t/2);return e===t?r:1===e?e:t<r?r-a<n?r-t+e:a<n?n-a+e:e:e},e.decorators=[{type:r.Directive,args:[{selector:"pagination-template,[pagination-template]",exportAs:"paginationApi"}]}],e.ctorParameters=function(){return[{type:s},{type:r.ChangeDetectorRef}]},e.propDecorators={id:[{type:r.Input}],maxSize:[{type:r.Input}],pageChange:[{type:r.Output}]},e}(),p=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[a.CommonModule],declarations:[o,c,d],providers:[s],exports:[o,c,d]}]}],e.ctorParameters=function(){return[]},e}()}}]);