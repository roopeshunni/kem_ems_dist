(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{L56E:function(e,t,n){"use strict";n.r(t);var r=n("mrSG"),a=n("CcnG"),s=n("qmRI"),i=n("Ip0R"),o=function(){function e(e,t){var n=this;this.ems=e,this.datepipe=t,this.popoverTitle="Delete User",this.popoverMessage="Are you sure to delete",this.confirmClicked=!1,this.cancelClicked=!1,this.errMsg=!1,this.isDate=!1,this.isAllot=!1,this.ismore=!1,this.btnen=!1;var r=new Date;this.mindate=this.datepipe.transform(r,"yyyy-MM-dd");var a=new Date(this.mindate);a.setMonth(a.getMonth()+3),this.maxdate=this.datepipe.transform(a,"yyyy-MM-dd"),this.ems.active=2,this.ems.login("leona@yopmail.com","Test@123").subscribe(function(e){"Success"==e.status&&(localStorage.setItem("sessionid",e.data.session_token),localStorage.setItem("uid",e.data.user_id),localStorage.setItem("role",e.data.role_name),localStorage.setItem("cen_id",e.data.cen_id),localStorage.setItem("username",e.data.user_name),localStorage.setItem("permission",e.data.action_list),n.sessionid=localStorage.getItem("sessionid"),n.uid=localStorage.getItem("uid"),n.cen_id=localStorage.getItem("cen_id"),n.gethalldetails())})}return e.prototype.ngOnInit=function(){$("html, body").animate({scrollTop:0})},e.prototype.date=function(e){},e.prototype.allotRoom=function(e){var t=this;this.isZero=!1,this.ismore=!1,e.invalid?this.errMsg=!0:(this.errMsg=!1,this.ems.assignHall(this.room,this.exam,this.cen_id,this.pgm,this.course,this.sessionid,this.uid).subscribe(function(e){t.ems.status=e.status,"Success"==e.status?(t.halldetails=e.data,t.x=t.halldetails.exam_hall_free,t.isAllot=!0,t.ems.msg=e.message,t.btndisable(),localStorage.setItem("hallNo",t.halldetails.hall_id)):("Unauthorised access"==e.message&&t.ems.sessionlogout(),"Bad request"==e.message?(t.ems.msg="Internal Server Error",$("#myModal").modal("show")):(t.ems.msg=e.message,$("#myModal").modal("show")))}))},e.prototype.allotRoom2=function(e){var t=this;e.invalid&&0==this.ismore&&0==this.isZero?this.errMsg=!0:(this.errMsg=!1,this.ems.allotHall(+this.room,+this.exam,+this.cen_id,+this.pgm,+this.course,+this.alloted_val,this.sessionid,this.uid).subscribe(function(n){t.ems.status=n.status,"Success"==n.status?(t.halldetails=[],t.isAllot=!1,t.ems.msg=n.message,$("#myModal").modal("show"),e.reset(),document.getElementById("Login").reset()):("Unauthorised access"==n.message&&t.ems.sessionlogout(),"Bad request"==n.message?(t.ems.msg="Internal Server Error",$("#myModal").modal("show")):(t.ems.msg=n.message,$("#myModal").modal("show")))}))},e.prototype.dobcheck=function(e){var t=new Date(e),n=new Date(this.maxdate),r=new Date(this.mindate);this.isDate=t>n||t<r},e.prototype.pgmselect=function(e){var t=this;this.btnenable(),this.ems.examSpecificCourse(this.sessionid,this.uid,e,this.exam).subscribe(function(e){t.coursedeatails=e.data,"Unauthorised access"==e.message&&t.ems.sessionlogout(),t.course&&(t.course=null),0==t.coursedeatails.length?t.iscourse=!0:t.iscourse=!1})},e.prototype.gethalldetails=function(){var e=this;this.ems.getExamHall(this.sessionid,this.uid,this.cen_id).subscribe(function(t){"Unauthorised access"==t.message&&e.ems.sessionlogout(),e.roomdetails=t.data,e.ems.centerSpecificExam(e.sessionid,e.uid,e.cen_id).subscribe(function(t){e.examdetails=t.data,"Unauthorised access"==t.message&&e.ems.sessionlogout()})}),$("html, body").animate({scrollTop:0})},e.prototype.examselect=function(e){var t=this;this.btnenable(),this.ems.getprglist(e,this.ems.sessionid,this.ems.uid).subscribe(function(e){t.prgdetails=e.data,"Unauthorised access"==e.message&&t.ems.sessionlogout(),t.pgm&&(t.pgm=null,t.course=null),0==t.prgdetails.length?t.ispgm=!0:t.ispgm=!1})},e.prototype.iszero=function(e){this.alloted_val=e,this.isZero=e<=0,e>=this.x?this.ismore=!0:this.ismore=!1},e.prototype.btnenable=function(){this.btnen=!0},e.prototype.btndisable=function(){this.btnen=!1},e.prototype.courseselect=function(e){this.btnen=!0},e.prototype.roomselect=function(e){this.btnen=!0},e=r.b([Object(a.Component)({selector:"app-assignexamhall",template:n("uam/"),styles:[n("V7pO")]}),r.d("design:paramtypes",[s.a,i.DatePipe])],e)}(),l=n("Zseb"),c=n("ZYCi"),d=n("gIcY"),p=n("xkgV"),u=n("fCu2");n.d(t,"routes",function(){return g}),n.d(t,"AssignexamhallModule",function(){return m});var g=[{path:"",component:o,pathMatch:"full"}],m=function(){function e(){}return e.routes=g,e=r.b([Object(a.NgModule)({imports:[i.CommonModule,c.RouterModule.forChild(g),d.FormsModule,l.a,p.a,u.a.forRoot({confirmButtonType:"danger"})],declarations:[o],providers:[i.DatePipe],bootstrap:[o]})],e)}()},V7pO:function(e,t){e.exports=""},"uam/":function(e,t){e.exports='<div class="row brdcrm-mrgn">\r\n        <div class="col-md-6 col-sm-6 col-xs-8">\r\n          <div >\r\n          <div class="panel-heading mainpanel-hd text-uppercase">\r\n            \x3c!-- Examination Management System --\x3e\r\n          </div>\r\n          </div>\r\n         </div>\r\n         <div class="col-md-6 col-sm-12 col-xs-12 pull-right">\r\n          <ol class="breadcrumb">\r\n            <li><a href="#/app/dashboard"><i class="fa fa-dashboard"></i> Home</a></li>\r\n            <li><a href="#/app/preExam">Pre Examination Management</a>\r\n              </li>\r\n              <li class="active">Hall Allotment</li>\r\n            </ol>\r\n         </div>\r\n       </div>\r\n<section>\r\n        <div class="row">\r\n\r\n            <div class="col-md-12" id="first-content">\r\n\r\n                <div class="panel panel-primary" id="shadows">\r\n                    <div class="panel-heading " id="head-title"><i class="fa fa-info-circle"></i>&nbsp;Allot Room\r\n                    </div>\r\n                    <div class="panel-body">\r\n                       \r\n                    <form #h="ngForm" (ngSubmit)="allotRoom2(h)">\r\n                       \r\n                        <form #f="ngForm" (ngSubmit)="allotRoom(f)" id="Login">\r\n                        <div class="row">\r\n                            <div class="col-md-12">\r\n                                   <div class="form-group">\r\n                                    <label for="email" id="labels">Exam<strong style="color:red;">*</strong></label>\r\n                                    <select class="form-control input-sm" name="exam" (change)="examselect($event.target.value)" required [(ngModel)]="exam" #examControl="ngModel">\r\n                                            <option   selected value="undefined" disabled>----select your option-------- </option>\r\n                                        <option *ngFor="let exam of examdetails" value="{{exam.exam_id}}">{{exam.exam_name}}</option>\r\n                                        \x3c!-- <option>#</option>\r\n                                        <option>#</option>\r\n                                        <option>#</option> --\x3e\r\n                                    </select>\r\n                                    <span style="color:red;" class="help-block" *ngIf="examControl.errors?.required && examControl.touched">\r\n                                            Exam is required\r\n                                        </span>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div class="row">\r\n                            <div class="col-md-12">\r\n                                   <div class="form-group">\r\n                                    <label for="email" id="labels">Programme<strong style="color:red;">*</strong></label>\r\n                                   \r\n                                    <select class="form-control input-sm" name="pgm" (change)="pgmselect($event.target.value)" required [(ngModel)]="pgm" #pgmControl="ngModel">\r\n                                            <option   selected value="undefined" disabled>----select your option-------- </option>\r\n                                        <option *ngFor="let prg of prgdetails"  value="{{prg.program_id}}">{{prg.program_name}}</option>\r\n                                        \x3c!-- <option>#</option>\r\n                                        <option>#</option>\r\n                                        <option>#</option> --\x3e\r\n                                    </select>\r\n                                    <span style="color:red;" class="help-block" *ngIf="pgmControl.errors?.required && pgmControl.touched">\r\n                                            Programme is required\r\n                                        </span>\r\n                                        <div  *ngIf="ispgm" class="red-text center error-message" style="font-size: 15px;color:red;">\r\n                                            No programs found for that particular exam\r\n                                            </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div class="row">\r\n                            <div class="col-md-12">\r\n                                   <div class="form-group">\r\n                                    <label for="email" id="labels">Course<strong style="color:red;">*</strong></label>\r\n                                    <select class="form-control input-sm" name="course" (change)="courseselect($event.target.value)" required [(ngModel)]="course" #courseControl="ngModel">\r\n                                            <option   selected value="undefined" disabled>----select your option-------- </option>\r\n                                        <option *ngFor="let course of coursedeatails" value="{{course.course_id}}">{{course.course_name}}</option>\r\n                                        \x3c!-- <option>#</option>\r\n                                        <option>#</option>\r\n                                        <option>#</option> --\x3e\r\n                                    </select>\r\n                                    <span style="color:red;" class="help-block" *ngIf="courseControl.errors?.required && courseControl.touched">\r\n                                            Course is required\r\n                                        </span>\r\n                                        <div  *ngIf="iscourse" class="red-text center error-message" style="font-size: 15px;color:red;">\r\n                                            No course found for the current date\r\n                                            </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                        <div class="row">\r\n                            <div class="col-md-12">\r\n                                   <div class="form-group">\r\n                                    <label for="email" id="labels">Room<strong style="color:red;">*</strong></label>\r\n                                    <select class="form-control input-sm" name="room" (change)="roomselect($event.target.value)" required [(ngModel)]="room" #roomControl="ngModel">\r\n                                            <option   selected value="undefined" disabled>----select your option-------- </option>\r\n                                        <option *ngFor="let room of roomdetails" value="{{room.room_id  }}">{{room.building_name}}</option>\r\n                                       \r\n                                    </select>\r\n                                    <span style="color:red;" class="help-block" *ngIf="roomControl.errors?.required && roomControl.touched">\r\n                                            Room is required\r\n                                        </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div  *ngIf="errMsg" class="red-text center error-message" style="text-align: center;font-size: 15px;color:red;">\r\n                            Please fill valid data in the required fields\r\n                         </div>\r\n                        <div class="row">\r\n                            <div *ngIf="btnen==true" class="col-md-12">\r\n                                <button type="submit" id="Sub" class="btn btn-primary btn-sm"><i class="fa fa-check"></i>&nbsp;submit</button>\r\n                            </div>\r\n                            <div *ngIf="btnen==false" class="col-md-12">\r\n                                <button type="submit" id="Sub" disabled class="btn btn-primary btn-sm"><i class="fa fa-check"></i>&nbsp;submit</button>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                        <div *ngIf="isAllot" class="panel-body"  id="table-contents">\r\n                            <div class="row">\r\n                             \r\n                               <div id="no-more-tables">\r\n                                  <table class="col-md-12 col-sm-12 col-xs-12 table-bordered table-striped table-condensed cf">\r\n                                     <thead class="cf">\r\n                                        <tr>\r\n                                           \x3c!-- <th>Sl.No</th> --\x3e\r\n                                           <th>Building Name</th>\r\n                                           \x3c!-- <th>Exam Name</th> --\x3e\r\n                                           <th>Exam Hall Number</th>\r\n                                           <th>Total seats</th> \r\n                                           \r\n                                           \x3c!-- <th>Total seats</th> --\x3e\r\n                                           <th>Allotted seats</th>\r\n                                           <th>Available seats</th>\r\n                                            <th>View</th>\r\n                                          \r\n               \r\n                                        </tr>\r\n                                     </thead>\r\n                                     <tbody>\r\n                                            \x3c!-- *ngFor="let hall of halldetails; --\x3e\r\n                                        <tr i=index;>\r\n                                           \x3c!-- <td data-title="Sl.No">&nbsp;{{i+1}}</td> --\x3e\r\n                                           <td data-title="Building Name">&nbsp;{{halldetails.exam_hall_name}}</td>\r\n                                           \x3c!-- <td data-title="Exam Name">&nbsp;{{halldetails.exam_name}}</td> --\x3e\r\n                                           <td data-title="Exam Hall Number" class="numeric">&nbsp;{{halldetails.exam_hall_number}}</td>\r\n                                           <td data-title="Exam Hall Capacity">&nbsp;{{halldetails.exam_hall_capacity}}</td>\r\n                                           \x3c!-- <td data-title="Total seats">&nbsp;{{hall.exam_hall_name}}</td> --\x3e\r\n                                           <td data-title="Allotted seats">&nbsp;{{halldetails.exam_hall_allotted}}</td>\r\n                                           <td data-title="Available seats">&nbsp;{{halldetails.exam_hall_free}}</td>\r\n                                           <td data-title="View "><a href="#/app/studentallot"  style="cursor:pointer"><i class="fa fa-eye"></i></a></td>\r\n                                         \r\n                                       \r\n                                        \r\n                                        </tr>\r\n               \r\n                                     </tbody>\r\n                                  </table>\r\n                               </div>\r\n                            </div>\r\n                         </div>\r\n\r\n                        </form>\r\n                        <div *ngIf="isAllot">\r\n                         <div class="row">\r\n                            \x3c!-- <div class="col-md-3">\r\n                                   <div class="form-group">\r\n                                    <label for="email" id="labels">Date<strong style="color:red;">*</strong>:</label>\r\n                                    <input class="form-control input-sm" (change)="dobcheck($event.target.value)" min={{mindate}} max={{maxdate}}  type="date" name="date_of_exam" required [(ngModel)]="date_of_exam" #date_of_examControl="ngModel">\r\n                                    <span style="color:red;" class="help-block" *ngIf="date_of_examControl.errors?.required && date_of_examControl.touched">\r\n                                            Date is required\r\n                                        </span>\r\n\r\n                                        <span *ngIf="date_of_examControl.touched && isDate "style="color:red;" class="input-sm">\r\n                                                Invalid Date\r\n                                              </span>\r\n                                </div>\r\n\r\n\r\n                            </div> --\x3e\r\n                            <div class="col-md-3">\r\n                                <div class="form-group">\r\n                                 <label for="email" id="labels">No of candidates required<strong style="color:red;">*</strong>:</label>\r\n                               <input type="number" class="form-control input-sm" name="no" (input)="iszero($event.target.value)" required [(ngModel)]="no" placeholder="Enter total number of candidates" #noControl="ngModel">\r\n                               <span style="color:red;" class="help-block" *ngIf="noControl.errors?.required && noControl.touched">\r\n                                     Candidates Number is required\r\n                                 </span>\r\n\r\n                                 <div  *ngIf="isZero" class="red-text center error-message" style="font-size: 15px;color:red;">\r\n                                    Can\'t give value Zero or Negative value\r\n                                </div>\r\n                                \r\n                                <div  *ngIf="ismore" class="red-text center error-message" style="font-size: 15px;color:red;">\r\n                                        Can\'t give value more than the number of available seats\r\n                                </div>\r\n                             </div>\r\n\r\n\r\n                         </div>\r\n\r\n\r\n                         </div>\r\n                         \x3c!-- <div class="row">\r\n                           \r\n\r\n\r\n                        </div> --\x3e\r\n\r\n                       <div  *ngIf="errMsg1" class="red-text center error-message" style="text-align: center;font-size: 15px;color:red;">\r\n                        Please fill valid data in the required fields\r\n                       </div>\r\n\r\n                    \r\n                        <div class="panel-footer panel-default text-right">\r\n                            <button type="submit" class="btn btn-primary btn-sm"><i class="fa fa-check-square"></i>&nbsp;Allot</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    </form>\r\n                </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n</section>\r\n\r\n\x3c!-- <section>\r\n    <br><br>\r\n       <div class="panel panel-primary" id="shadows">\r\n          <div class="panel-heading" id="head-title">\r\n             <i class="fa fa-info-circle"></i>&nbsp; Details\r\n          </div>\r\n          <div class="panel-body"  id="table-contents">\r\n             <div class="row">\r\n              \r\n                <div id="no-more-tables">\r\n                   <table class="col-md-12 col-sm-12 col-xs-12 table-bordered table-striped table-condensed cf">\r\n                      <thead class="cf">\r\n                         <tr>\r\n                            <th>Sl.No</th>\r\n                            <th>Building Name</th>\r\n                            <th>Exam Name</th>\r\n                            <th>Exam Hall Number</th>\r\n                            <th>Total seats</th> \r\n                            <th>Allotted seats</th>\r\n                            <th>Available seats</th>\r\n                           \r\n\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                         <tr *ngFor="let hall of halldetails; let i=index;">\r\n                            <td data-title="Sl.No">&nbsp;{{i+1}}</td>\r\n                            <td data-title="Building Name">&nbsp;{{hall.exam_hall_name}}</td>\r\n                            <td data-title="Exam Name">&nbsp;{{hall.exam_name}}</td>\r\n                            <td data-title="Exam Hall Number" class="numeric">&nbsp;{{hall.exam_hall_number}}</td>\r\n                            <td data-title="Exam Hall Capacity">&nbsp;{{hall.exam_hall_capacity}}</td>\r\n                            <td data-title="Allotted seats">&nbsp;{{hall.exam_hall_allotted}}</td>\r\n                            <td data-title="Available seats">&nbsp;{{hall.exam_hall_free}}</td>\r\n                          \r\n                        \r\n                         \r\n                        \r\n\r\n                      </tbody>\r\n                   </table>\r\n                </div>\r\n             </div>\r\n          </div>\r\n          <div class="panel-footer text-right">\r\n         \r\n          </div>\r\n       </div>\r\n </section> --\x3e'},xkgV:function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r=n("CcnG"),a=n("Ip0R"),s=function(){function e(){this.change=new r.EventEmitter,this.instances={},this.DEFAULT_ID="DEFAULT_PAGINATION_ID"}return e.prototype.defaultId=function(){return this.DEFAULT_ID},e.prototype.register=function(e){(null==e.id&&(e.id=this.DEFAULT_ID),this.instances[e.id])?this.updateInstance(e)&&this.change.emit(e.id):(this.instances[e.id]=e,this.change.emit(e.id))},e.prototype.updateInstance=function(e){var t=!1;for(var n in this.instances[e.id])e[n]!==this.instances[e.id][n]&&(this.instances[e.id][n]=e[n],t=!0);return t},e.prototype.getCurrentPage=function(e){if(this.instances[e])return this.instances[e].currentPage},e.prototype.setCurrentPage=function(e,t){if(this.instances[e]){var n=this.instances[e];t<=Math.ceil(n.totalItems/n.itemsPerPage)&&1<=t&&(this.instances[e].currentPage=t,this.change.emit(e))}},e.prototype.setTotalItems=function(e,t){this.instances[e]&&0<=t&&(this.instances[e].totalItems=t,this.change.emit(e))},e.prototype.setItemsPerPage=function(e,t){this.instances[e]&&(this.instances[e].itemsPerPage=t,this.change.emit(e))},e.prototype.getInstance=function(e){return void 0===e&&(e=this.DEFAULT_ID),this.instances[e]?this.clone(this.instances[e]):{}},e.prototype.clone=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},e}(),i=Number.MAX_SAFE_INTEGER,o=function(){function e(e){this.service=e,this.state={}}return e.prototype.transform=function(e,t){if(t instanceof Array&&(t=t[0]),!(e instanceof Array)){var n=t.id||this.service.defaultId;return this.state[n]?this.state[n].slice:e}var r,a,s=t.totalItems&&t.totalItems!==e.length,o=this.createInstance(e,t),l=o.id,c=o.itemsPerPage;if(this.service.register(o),!s&&e instanceof Array){if(c=+c||i,a=(r=(o.currentPage-1)*c)+c,this.stateIsIdentical(l,e,r,a))return this.state[l].slice;var d=e.slice(r,a);return this.saveState(l,e,d,r,a),this.service.change.emit(l),d}return this.saveState(l,e,e,r,a),e},e.prototype.createInstance=function(e,t){var n=t;return this.checkConfig(n),{id:null!=n.id?n.id:this.service.defaultId(),itemsPerPage:+n.itemsPerPage||0,currentPage:+n.currentPage||1,totalItems:+n.totalItems||e.length}},e.prototype.checkConfig=function(e){var t=["itemsPerPage","currentPage"].filter(function(t){return!(t in e)});if(0<t.length)throw new Error("PaginatePipe: Argument is missing the following required properties: "+t.join(", "))},e.prototype.saveState=function(e,t,n,r,a){this.state[e]={collection:t,size:t.length,slice:n,start:r,end:a}},e.prototype.stateIsIdentical=function(e,t,n,r){var a=this.state[e];return!!a&&(!(a.size!==t.length||a.start!==n||a.end!==r)&&a.slice.every(function(e,r){return e===t[n+r]}))},e.decorators=[{type:r.Pipe,args:[{name:"paginate",pure:!1}]}],e.ctorParameters=function(){return[{type:s}]},e}();function l(e){return!!e&&"false"!==e}var c=function(){function e(){this.maxSize=7,this.previousLabel="Previous",this.nextLabel="Next",this.screenReaderPaginationLabel="Pagination",this.screenReaderPageLabel="page",this.screenReaderCurrentLabel="You're on page",this.pageChange=new r.EventEmitter,this._directionLinks=!0,this._autoHide=!1,this._responsive=!1}return Object.defineProperty(e.prototype,"directionLinks",{get:function(){return this._directionLinks},set:function(e){this._directionLinks=l(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"autoHide",{get:function(){return this._autoHide},set:function(e){this._autoHide=l(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"responsive",{get:function(){return this._responsive},set:function(e){this._responsive=l(e)},enumerable:!0,configurable:!0}),e.decorators=[{type:r.Component,args:[{selector:"pagination-controls",template:'\n    <pagination-template  #p="paginationApi"\n                         [id]="id"\n                         [maxSize]="maxSize"\n                         (pageChange)="pageChange.emit($event)">\n    <ul class="ngx-pagination" \n        role="navigation" \n        [attr.aria-label]="screenReaderPaginationLabel" \n        [class.responsive]="responsive"\n        *ngIf="!(autoHide && p.pages.length <= 1)">\n\n        <li class="pagination-previous" [class.disabled]="p.isFirstPage()" *ngIf="directionLinks"> \n            <a tabindex="0" *ngIf="1 < p.getCurrent()" (keyup.enter)="p.previous()" (click)="p.previous()" [attr.aria-label]="previousLabel + \' \' + screenReaderPageLabel">\n                {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf="p.isFirstPage()">\n                {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class="small-screen">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]="p.getCurrent() === page.value" \n            [class.ellipsis]="page.label === \'...\'"\n            *ngFor="let page of p.pages">\n            <a tabindex="0" (keyup.enter)="p.setCurrent(page.value)" (click)="p.setCurrent(page.value)" *ngIf="p.getCurrent() !== page.value">\n                <span class="show-for-sr">{{ screenReaderPageLabel }} </span>\n                <span>{{ page.label }}</span>\n            </a>\n            <ng-container *ngIf="p.getCurrent() === page.value">\n                <span class="show-for-sr">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ page.label }}</span> \n            </ng-container>\n        </li>\n\n        <li class="pagination-next" [class.disabled]="p.isLastPage()" *ngIf="directionLinks">\n            <a tabindex="0" *ngIf="!p.isLastPage()" (keyup.enter)="p.next()" (click)="p.next()" [attr.aria-label]="nextLabel + \' \' + screenReaderPageLabel">\n                 {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf="p.isLastPage()">\n                 {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </pagination-template>\n    ',styles:["\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '\xab';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '\xbb';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  "],changeDetection:r.ChangeDetectionStrategy.OnPush,encapsulation:r.ViewEncapsulation.None}]}],e.ctorParameters=function(){return[]},e.propDecorators={id:[{type:r.Input}],maxSize:[{type:r.Input}],directionLinks:[{type:r.Input}],autoHide:[{type:r.Input}],responsive:[{type:r.Input}],previousLabel:[{type:r.Input}],nextLabel:[{type:r.Input}],screenReaderPaginationLabel:[{type:r.Input}],screenReaderPageLabel:[{type:r.Input}],screenReaderCurrentLabel:[{type:r.Input}],pageChange:[{type:r.Output}]},e}(),d=function(){function e(e,t){var n=this;this.service=e,this.changeDetectorRef=t,this.maxSize=7,this.pageChange=new r.EventEmitter,this.pages=[],this.changeSub=this.service.change.subscribe(function(e){n.id===e&&(n.updatePageLinks(),n.changeDetectorRef.markForCheck(),n.changeDetectorRef.detectChanges())})}return e.prototype.ngOnInit=function(){void 0===this.id&&(this.id=this.service.defaultId()),this.updatePageLinks()},e.prototype.ngOnChanges=function(e){this.updatePageLinks()},e.prototype.ngOnDestroy=function(){this.changeSub.unsubscribe()},e.prototype.previous=function(){this.checkValidId(),this.setCurrent(this.getCurrent()-1)},e.prototype.next=function(){this.checkValidId(),this.setCurrent(this.getCurrent()+1)},e.prototype.isFirstPage=function(){return 1===this.getCurrent()},e.prototype.isLastPage=function(){return this.getLastPage()===this.getCurrent()},e.prototype.setCurrent=function(e){this.pageChange.emit(e)},e.prototype.getCurrent=function(){return this.service.getCurrentPage(this.id)},e.prototype.getLastPage=function(){var e=this.service.getInstance(this.id);return e.totalItems<1?1:Math.ceil(e.totalItems/e.itemsPerPage)},e.prototype.getTotalItems=function(){return this.service.getInstance(this.id).totalItems},e.prototype.checkValidId=function(){null==this.service.getInstance(this.id).id&&console.warn('PaginationControlsDirective: the specified id "'+this.id+'" does not match any registered PaginationInstance')},e.prototype.updatePageLinks=function(){var e=this,t=this.service.getInstance(this.id),n=this.outOfBoundCorrection(t);n!==t.currentPage?setTimeout(function(){e.setCurrent(n),e.pages=e.createPageArray(t.currentPage,t.itemsPerPage,t.totalItems,e.maxSize)}):this.pages=this.createPageArray(t.currentPage,t.itemsPerPage,t.totalItems,this.maxSize)},e.prototype.outOfBoundCorrection=function(e){var t=Math.ceil(e.totalItems/e.itemsPerPage);return t<e.currentPage&&0<t?t:e.currentPage<1?1:e.currentPage},e.prototype.createPageArray=function(e,t,n,r){r=+r;for(var a=[],s=Math.ceil(n/t),i=Math.ceil(r/2),o=e<=i,l=s-i<e,c=!o&&!l,d=r<s,p=1;p<=s&&p<=r;){var u=void 0,g=this.calculatePageNumber(p,e,r,s);u=d&&(2===p&&(c||l)||p===r-1&&(c||o))?"...":g,a.push({label:u,value:g}),p++}return a},e.prototype.calculatePageNumber=function(e,t,n,r){var a=Math.ceil(n/2);return e===n?r:1===e?e:n<r?r-a<t?r-n+e:a<t?t-a+e:e:e},e.decorators=[{type:r.Directive,args:[{selector:"pagination-template,[pagination-template]",exportAs:"paginationApi"}]}],e.ctorParameters=function(){return[{type:s},{type:r.ChangeDetectorRef}]},e.propDecorators={id:[{type:r.Input}],maxSize:[{type:r.Input}],pageChange:[{type:r.Output}]},e}(),p=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[a.CommonModule],declarations:[o,c,d],providers:[s],exports:[o,c,d]}]}],e.ctorParameters=function(){return[]},e}()}}]);